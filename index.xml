<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ムギッシュ！開発ブログ</title>
    <link>https://mugish.github.io/</link>
    <description>Recent content on ムギッシュ！開発ブログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Feb 2016 17:51:51 +0900</lastBuildDate>
    <atom:link href="https://mugish.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>React.jsをRailsを使って事前にレンダリング（Prerendering React.js with Rails）</title>
      <link>https://mugish.github.io/post/prerendering-react-js-with-rails/</link>
      <pubDate>Sun, 07 Feb 2016 17:51:51 +0900</pubDate>
      
      <guid>https://mugish.github.io/post/prerendering-react-js-with-rails/</guid>
      <description>

&lt;h2 id=&#34;install-setup:29d517f3a3cf3e5e26e0e52c0f22769c&#34;&gt;Install &amp;amp;&amp;amp; Setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-rails&#34;&gt;https://github.com/reactjs/react-rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以下からturbolinkを削除

&lt;ul&gt;
&lt;li&gt;Gemfile&lt;/li&gt;
&lt;li&gt;app/assets/javascripts/application.js&lt;/li&gt;
&lt;li&gt;app/views/layouts/application.html.erb&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;# Gemfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem &#39;react-rails&#39;, &#39;~&amp;gt; 1.6.0&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# config/environments/development.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.react.variant = :development
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# config/environments/production.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config.react.variant = :production
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;bundle install --vendor/bundle
rails g react:install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;generate-files:29d517f3a3cf3e5e26e0e52c0f22769c&#34;&gt;Generate files&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;rails g controller home index
rails g controller comments create
rails g model comment name:string message:text
bundle exec rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# config/routes.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Rails.application.routes.draw do
  root &#39;home#index&#39;
  resources :comments, only: [:create]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;controller:29d517f3a3cf3e5e26e0e52c0f22769c&#34;&gt;Controller&lt;/h2&gt;

&lt;p&gt;# app/controllers/home_controller.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class HomeController &amp;lt; ApplicationController
  def index
    @comments = Comment.all
    props = { comments: @comments, url: &#39;/comments&#39; }
    render component: &#39;CommentArea&#39;, props: props, tag: &#39;span&#39;, class: &#39;comment&#39;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# app/controllers/comments_controller.rb&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class CommentsController &amp;lt; ApplicationController
  def create
    comment = Comment.create(comment_params)
    render json: comment, status: :created
  end

  private
    def comment_params
      params.permit(:name, :message)
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jsx:29d517f3a3cf3e5e26e0e52c0f22769c&#34;&gt;JSX&lt;/h2&gt;

&lt;p&gt;# app/assets/javascripts/components/comment_form.js.jsx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var CommentForm = React.createClass({
  handleSubmit: function(e) {
    e.preventDefault();
    this.props.onCommentSubmit({ 
      name: this.refs.name.value.trim(), 
      message: this.refs.message.value.trim()
    });

    this.refs.name.value = &#39;&#39;;
    this.refs.message.value = &#39;&#39;;
  },
  render: function() {
    return (
      &amp;lt;form className=&amp;quot;commentForm&amp;quot; onSubmit={this.handleSubmit}&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Your Name&amp;quot; ref=&amp;quot;name&amp;quot; /&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;Message...&amp;quot; ref=&amp;quot;message&amp;quot; /&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Post&amp;quot; /&amp;gt;
      &amp;lt;/form&amp;gt;
    );
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# app/assets/javascripts/components/comment_item.js.jsx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var CommentItem = React.createClass({
  render: function() {
    return (
      &amp;lt;div className=&amp;quot;comment&amp;quot;&amp;gt;
        &amp;lt;h2 className=&amp;quot;comment-user&amp;quot;&amp;gt;{this.props.comment.name}&amp;lt;/h2&amp;gt;
        &amp;lt;span className=&amp;quot;comment-message&amp;quot;&amp;gt;{this.props.comment.message}&amp;lt;/span&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;# app/assets/javascripts/components/comment.js.jsx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var CommentArea = React.createClass({
  getInitialState: function() {
    return { comments: this.props.comments, isLoading: false };
  },

  handleCommentSubmit: function(message) {
    message.id = new Date();
    $.ajax({
      url: this.props.url,
      dataType: &#39;json&#39;,
      type: &#39;POST&#39;,
      data: message,
      success: function(comment) {
        this.setState({ comments: this.state.comments.concat(comment) });
      }.bind(this),
      error: function(_xhr, status, error) {
        console.error(this.props.url, status, error.toString());
      }.bind(this)
    });
  },

  render: function() {

    var commentItems = this.state.comments.map(function(comment) {
      return (
        &amp;lt;CommentItem key={comment.id} comment={comment} /&amp;gt;
      );
    });

    return (
      &amp;lt;div&amp;gt;
        {commentItems}
        &amp;lt;CommentForm onCommentSubmit={this.handleCommentSubmit} /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サンプルソース:29d517f3a3cf3e5e26e0e52c0f22769c&#34;&gt;サンプルソース&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mugish/prerendering-react-js-with-rails&#34;&gt;https://github.com/mugish/prerendering-react-js-with-rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>